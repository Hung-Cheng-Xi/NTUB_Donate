// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type {
  ClientGetDonationsData,
  ClientCreateDonationData,
  ClientCreateDonationError,
  ClientCreateDonationResponse,
  ClientGetDonationPurposesData,
  ClientGetDonationPurposeData,
  ClientGetAnnouncementsData,
  ClientGetAnnouncementData,
  ClientGetRegulationsData,
  ClientGetRegulationData,
  ClientGenerateBarcodeData,
  ClientGenerateBarcodeError,
  ClientGenerateBarcodeResponse,
  ClientGetZipcodeData,
  ClientGetZipcodeError,
  ClientGetZipcodeResponse,
  AdminLoginData,
  AdminLoginError,
  AdminLoginResponse,
  AdminRefreshError,
  AdminRefreshResponse,
  AdminExcelExportData,
  AdminExcelExportError,
  AdminExcelExportResponse,
  AdminRefreshFtpDataError,
  AdminRefreshFtpDataResponse,
  AdminListFilesError,
  AdminListFilesResponse,
  AdminGetRegulationsData,
  AdminCreateRegulationData,
  AdminCreateRegulationError,
  AdminCreateRegulationResponse,
  AdminGetRegulationData,
  AdminUpdateRegulationData,
  AdminUpdateRegulationError,
  AdminUpdateRegulationResponse,
  AdminDeleteRegulationData,
  AdminDeleteRegulationError,
  AdminDeleteRegulationResponse,
  AdminGetDonationPurposesData,
  AdminCreateDonationPurposeData,
  AdminCreateDonationPurposeError,
  AdminCreateDonationPurposeResponse,
  AdminGetDonationPurposeData,
  AdminUpdateDonationPurposeData,
  AdminUpdateDonationPurposeError,
  AdminUpdateDonationPurposeResponse,
  AdminDeleteDonationPurposeData,
  AdminDeleteDonationPurposeError,
  AdminDeleteDonationPurposeResponse,
  AdminGetDonationsData,
  AdminCreateDonationData,
  AdminCreateDonationError,
  AdminCreateDonationResponse,
  AdminGetDonationData,
  AdminUpdateDonationData,
  AdminUpdateDonationError,
  AdminUpdateDonationResponse,
  AdminDeleteDonationData,
  AdminDeleteDonationError,
  AdminDeleteDonationResponse,
  AdminGetAnnouncementsData,
  AdminCreateAnnouncementData,
  AdminCreateAnnouncementError,
  AdminCreateAnnouncementResponse,
  AdminGetAnnouncementData,
  AdminUpdateAnnouncementData,
  AdminUpdateAnnouncementError,
  AdminUpdateAnnouncementResponse,
  AdminDeleteAnnouncementData,
  AdminDeleteAnnouncementError,
  AdminDeleteAnnouncementResponse,
  AdminCreateUnitData,
  AdminCreateUnitError,
  AdminCreateUnitResponse,
  AdminGetUnitData,
  AdminUpdateUnitData,
  AdminUpdateUnitError,
  AdminUpdateUnitResponse,
  AdminDeleteUnitData,
  AdminDeleteUnitError,
  AdminDeleteUnitResponse,
  AdminCreateUserData,
  AdminCreateUserError,
  AdminCreateUserResponse,
  AdminGetUserData,
  AdminUpdateUserData,
  AdminUpdateUserError,
  AdminUpdateUserResponse,
  AdminDeleteUserData,
  AdminDeleteUserError,
  AdminDeleteUserResponse,
} from '../types.gen';
import {
  client,
  clientGetDonations,
  clientCreateDonation,
  clientGetDonationPurposes,
  clientGetDonationPurpose,
  clientGetAnnouncements,
  clientGetAnnouncement,
  clientGetRegulations,
  clientGetRegulation,
  clientGenerateBarcode,
  clientGetZipcode,
  adminLogin,
  adminRefresh,
  adminExcelExport,
  adminRefreshFtpData,
  adminListFiles,
  adminGetRegulations,
  adminCreateRegulation,
  adminGetRegulation,
  adminUpdateRegulation,
  adminDeleteRegulation,
  adminGetDonationPurposes,
  adminCreateDonationPurpose,
  adminGetDonationPurpose,
  adminUpdateDonationPurpose,
  adminDeleteDonationPurpose,
  adminGetDonations,
  adminCreateDonation,
  adminGetDonation,
  adminUpdateDonation,
  adminDeleteDonation,
  adminGetAnnouncements,
  adminCreateAnnouncement,
  adminGetAnnouncement,
  adminUpdateAnnouncement,
  adminDeleteAnnouncement,
  adminGetUnits,
  adminCreateUnit,
  adminGetUnit,
  adminUpdateUnit,
  adminDeleteUnit,
  adminGetUsers,
  adminCreateUser,
  adminGetUser,
  adminUpdateUser,
  adminDeleteUser,
} from '../services.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const clientGetDonationsQueryKey = (
  options?: Options<ClientGetDonationsData>,
) => [createQueryKey('clientGetDonations', options)];

export const clientGetDonationsOptions = (
  options?: Options<ClientGetDonationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGetDonations({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGetDonationsQueryKey(options),
  });
};

export const clientCreateDonationQueryKey = (
  options: Options<ClientCreateDonationData>,
) => [createQueryKey('clientCreateDonation', options)];

export const clientCreateDonationOptions = (
  options: Options<ClientCreateDonationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientCreateDonation({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientCreateDonationQueryKey(options),
  });
};

export const clientCreateDonationMutation = () => {
  const mutationOptions: UseMutationOptions<
    ClientCreateDonationResponse,
    AxiosError<ClientCreateDonationError>,
    Options<ClientCreateDonationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await clientCreateDonation({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const clientGetDonationPurposesQueryKey = (
  options?: Options<ClientGetDonationPurposesData>,
) => [createQueryKey('clientGetDonationPurposes', options)];

export const clientGetDonationPurposesOptions = (
  options?: Options<ClientGetDonationPurposesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGetDonationPurposes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGetDonationPurposesQueryKey(options),
  });
};

export const clientGetDonationPurposeQueryKey = (
  options: Options<ClientGetDonationPurposeData>,
) => [createQueryKey('clientGetDonationPurpose', options)];

export const clientGetDonationPurposeOptions = (
  options: Options<ClientGetDonationPurposeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGetDonationPurpose({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGetDonationPurposeQueryKey(options),
  });
};

export const clientGetAnnouncementsQueryKey = (
  options?: Options<ClientGetAnnouncementsData>,
) => [createQueryKey('clientGetAnnouncements', options)];

export const clientGetAnnouncementsOptions = (
  options?: Options<ClientGetAnnouncementsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGetAnnouncements({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGetAnnouncementsQueryKey(options),
  });
};

export const clientGetAnnouncementQueryKey = (
  options: Options<ClientGetAnnouncementData>,
) => [createQueryKey('clientGetAnnouncement', options)];

export const clientGetAnnouncementOptions = (
  options: Options<ClientGetAnnouncementData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGetAnnouncement({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGetAnnouncementQueryKey(options),
  });
};

export const clientGetRegulationsQueryKey = (
  options?: Options<ClientGetRegulationsData>,
) => [createQueryKey('clientGetRegulations', options)];

export const clientGetRegulationsOptions = (
  options?: Options<ClientGetRegulationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGetRegulations({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGetRegulationsQueryKey(options),
  });
};

export const clientGetRegulationQueryKey = (
  options: Options<ClientGetRegulationData>,
) => [createQueryKey('clientGetRegulation', options)];

export const clientGetRegulationOptions = (
  options: Options<ClientGetRegulationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGetRegulation({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGetRegulationQueryKey(options),
  });
};

export const clientGenerateBarcodeQueryKey = (
  options: Options<ClientGenerateBarcodeData>,
) => [createQueryKey('clientGenerateBarcode', options)];

export const clientGenerateBarcodeOptions = (
  options: Options<ClientGenerateBarcodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGenerateBarcode({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGenerateBarcodeQueryKey(options),
  });
};

export const clientGenerateBarcodeMutation = () => {
  const mutationOptions: UseMutationOptions<
    ClientGenerateBarcodeResponse,
    AxiosError<ClientGenerateBarcodeError>,
    Options<ClientGenerateBarcodeData>
  > = {
    mutationFn: async (options) => {
      const { data } = await clientGenerateBarcode({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const clientGetZipcodeQueryKey = (
  options: Options<ClientGetZipcodeData>,
) => [createQueryKey('clientGetZipcode', options)];

export const clientGetZipcodeOptions = (
  options: Options<ClientGetZipcodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await clientGetZipcode({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: clientGetZipcodeQueryKey(options),
  });
};

export const clientGetZipcodeMutation = () => {
  const mutationOptions: UseMutationOptions<
    ClientGetZipcodeResponse,
    AxiosError<ClientGetZipcodeError>,
    Options<ClientGetZipcodeData>
  > = {
    mutationFn: async (options) => {
      const { data } = await clientGetZipcode({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminLoginQueryKey = (options: Options<AdminLoginData>) => [
  createQueryKey('adminLogin', options),
];

export const adminLoginOptions = (options: Options<AdminLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminLogin({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminLoginQueryKey(options),
  });
};

export const adminLoginMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminLoginResponse,
    AxiosError<AdminLoginError>,
    Options<AdminLoginData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminLogin({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminRefreshQueryKey = (options?: Options) => [
  createQueryKey('adminRefresh', options),
];

export const adminRefreshOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminRefresh({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminRefreshQueryKey(options),
  });
};

export const adminRefreshMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminRefreshResponse,
    AxiosError<AdminRefreshError>,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await adminRefresh({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminExcelExportQueryKey = (
  options?: Options<AdminExcelExportData>,
) => [createQueryKey('adminExcelExport', options)];

export const adminExcelExportOptions = (
  options?: Options<AdminExcelExportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminExcelExport({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminExcelExportQueryKey(options),
  });
};

export const adminExcelExportMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminExcelExportResponse,
    AxiosError<AdminExcelExportError>,
    Options<AdminExcelExportData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminExcelExport({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminRefreshFtpDataQueryKey = (options?: Options) => [
  createQueryKey('adminRefreshFtpData', options),
];

export const adminRefreshFtpDataOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminRefreshFtpData({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminRefreshFtpDataQueryKey(options),
  });
};

export const adminRefreshFtpDataMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminRefreshFtpDataResponse,
    AxiosError<AdminRefreshFtpDataError>,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await adminRefreshFtpData({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminListFilesQueryKey = (options?: Options) => [
  createQueryKey('adminListFiles', options),
];

export const adminListFilesOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminListFiles({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminListFilesQueryKey(options),
  });
};

export const adminListFilesMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminListFilesResponse,
    AxiosError<AdminListFilesError>,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await adminListFiles({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetRegulationsQueryKey = (
  options?: Options<AdminGetRegulationsData>,
) => [createQueryKey('adminGetRegulations', options)];

export const adminGetRegulationsOptions = (
  options?: Options<AdminGetRegulationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetRegulations({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetRegulationsQueryKey(options),
  });
};

export const adminCreateRegulationQueryKey = (
  options: Options<AdminCreateRegulationData>,
) => [createQueryKey('adminCreateRegulation', options)];

export const adminCreateRegulationOptions = (
  options: Options<AdminCreateRegulationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminCreateRegulation({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminCreateRegulationQueryKey(options),
  });
};

export const adminCreateRegulationMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminCreateRegulationResponse,
    AxiosError<AdminCreateRegulationError>,
    Options<AdminCreateRegulationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminCreateRegulation({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetRegulationQueryKey = (
  options: Options<AdminGetRegulationData>,
) => [createQueryKey('adminGetRegulation', options)];

export const adminGetRegulationOptions = (
  options: Options<AdminGetRegulationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetRegulation({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetRegulationQueryKey(options),
  });
};

export const adminUpdateRegulationMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminUpdateRegulationResponse,
    AxiosError<AdminUpdateRegulationError>,
    Options<AdminUpdateRegulationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminUpdateRegulation({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminDeleteRegulationMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminDeleteRegulationResponse,
    AxiosError<AdminDeleteRegulationError>,
    Options<AdminDeleteRegulationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminDeleteRegulation({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetDonationPurposesQueryKey = (
  options?: Options<AdminGetDonationPurposesData>,
) => [createQueryKey('adminGetDonationPurposes', options)];

export const adminGetDonationPurposesOptions = (
  options?: Options<AdminGetDonationPurposesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetDonationPurposes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetDonationPurposesQueryKey(options),
  });
};

export const adminCreateDonationPurposeQueryKey = (
  options: Options<AdminCreateDonationPurposeData>,
) => [createQueryKey('adminCreateDonationPurpose', options)];

export const adminCreateDonationPurposeOptions = (
  options: Options<AdminCreateDonationPurposeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminCreateDonationPurpose({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminCreateDonationPurposeQueryKey(options),
  });
};

export const adminCreateDonationPurposeMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminCreateDonationPurposeResponse,
    AxiosError<AdminCreateDonationPurposeError>,
    Options<AdminCreateDonationPurposeData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminCreateDonationPurpose({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetDonationPurposeQueryKey = (
  options: Options<AdminGetDonationPurposeData>,
) => [createQueryKey('adminGetDonationPurpose', options)];

export const adminGetDonationPurposeOptions = (
  options: Options<AdminGetDonationPurposeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetDonationPurpose({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetDonationPurposeQueryKey(options),
  });
};

export const adminUpdateDonationPurposeMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminUpdateDonationPurposeResponse,
    AxiosError<AdminUpdateDonationPurposeError>,
    Options<AdminUpdateDonationPurposeData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminUpdateDonationPurpose({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminDeleteDonationPurposeMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminDeleteDonationPurposeResponse,
    AxiosError<AdminDeleteDonationPurposeError>,
    Options<AdminDeleteDonationPurposeData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminDeleteDonationPurpose({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetDonationsQueryKey = (
  options?: Options<AdminGetDonationsData>,
) => [createQueryKey('adminGetDonations', options)];

export const adminGetDonationsOptions = (
  options?: Options<AdminGetDonationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetDonations({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetDonationsQueryKey(options),
  });
};

export const adminCreateDonationQueryKey = (
  options: Options<AdminCreateDonationData>,
) => [createQueryKey('adminCreateDonation', options)];

export const adminCreateDonationOptions = (
  options: Options<AdminCreateDonationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminCreateDonation({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminCreateDonationQueryKey(options),
  });
};

export const adminCreateDonationMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminCreateDonationResponse,
    AxiosError<AdminCreateDonationError>,
    Options<AdminCreateDonationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminCreateDonation({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetDonationQueryKey = (
  options: Options<AdminGetDonationData>,
) => [createQueryKey('adminGetDonation', options)];

export const adminGetDonationOptions = (
  options: Options<AdminGetDonationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetDonation({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetDonationQueryKey(options),
  });
};

export const adminUpdateDonationMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminUpdateDonationResponse,
    AxiosError<AdminUpdateDonationError>,
    Options<AdminUpdateDonationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminUpdateDonation({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminDeleteDonationMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminDeleteDonationResponse,
    AxiosError<AdminDeleteDonationError>,
    Options<AdminDeleteDonationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminDeleteDonation({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetAnnouncementsQueryKey = (
  options?: Options<AdminGetAnnouncementsData>,
) => [createQueryKey('adminGetAnnouncements', options)];

export const adminGetAnnouncementsOptions = (
  options?: Options<AdminGetAnnouncementsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetAnnouncements({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetAnnouncementsQueryKey(options),
  });
};

export const adminCreateAnnouncementQueryKey = (
  options: Options<AdminCreateAnnouncementData>,
) => [createQueryKey('adminCreateAnnouncement', options)];

export const adminCreateAnnouncementOptions = (
  options: Options<AdminCreateAnnouncementData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminCreateAnnouncement({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminCreateAnnouncementQueryKey(options),
  });
};

export const adminCreateAnnouncementMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminCreateAnnouncementResponse,
    AxiosError<AdminCreateAnnouncementError>,
    Options<AdminCreateAnnouncementData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminCreateAnnouncement({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetAnnouncementQueryKey = (
  options: Options<AdminGetAnnouncementData>,
) => [createQueryKey('adminGetAnnouncement', options)];

export const adminGetAnnouncementOptions = (
  options: Options<AdminGetAnnouncementData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetAnnouncement({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetAnnouncementQueryKey(options),
  });
};

export const adminUpdateAnnouncementMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminUpdateAnnouncementResponse,
    AxiosError<AdminUpdateAnnouncementError>,
    Options<AdminUpdateAnnouncementData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminUpdateAnnouncement({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminDeleteAnnouncementMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminDeleteAnnouncementResponse,
    AxiosError<AdminDeleteAnnouncementError>,
    Options<AdminDeleteAnnouncementData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminDeleteAnnouncement({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetUnitsQueryKey = (options?: Options) => [
  createQueryKey('adminGetUnits', options),
];

export const adminGetUnitsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetUnits({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetUnitsQueryKey(options),
  });
};

export const adminCreateUnitQueryKey = (
  options: Options<AdminCreateUnitData>,
) => [createQueryKey('adminCreateUnit', options)];

export const adminCreateUnitOptions = (
  options: Options<AdminCreateUnitData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminCreateUnit({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminCreateUnitQueryKey(options),
  });
};

export const adminCreateUnitMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminCreateUnitResponse,
    AxiosError<AdminCreateUnitError>,
    Options<AdminCreateUnitData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminCreateUnit({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetUnitQueryKey = (options: Options<AdminGetUnitData>) => [
  createQueryKey('adminGetUnit', options),
];

export const adminGetUnitOptions = (options: Options<AdminGetUnitData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetUnit({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetUnitQueryKey(options),
  });
};

export const adminUpdateUnitMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminUpdateUnitResponse,
    AxiosError<AdminUpdateUnitError>,
    Options<AdminUpdateUnitData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminUpdateUnit({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminDeleteUnitMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminDeleteUnitResponse,
    AxiosError<AdminDeleteUnitError>,
    Options<AdminDeleteUnitData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminDeleteUnit({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetUsersQueryKey = (options?: Options) => [
  createQueryKey('adminGetUsers', options),
];

export const adminGetUsersOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetUsers({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetUsersQueryKey(options),
  });
};

export const adminCreateUserQueryKey = (
  options: Options<AdminCreateUserData>,
) => [createQueryKey('adminCreateUser', options)];

export const adminCreateUserOptions = (
  options: Options<AdminCreateUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminCreateUser({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminCreateUserQueryKey(options),
  });
};

export const adminCreateUserMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminCreateUserResponse,
    AxiosError<AdminCreateUserError>,
    Options<AdminCreateUserData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminCreateUser({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetUserQueryKey = (options: Options<AdminGetUserData>) => [
  createQueryKey('adminGetUser', options),
];

export const adminGetUserOptions = (options: Options<AdminGetUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await adminGetUser({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetUserQueryKey(options),
  });
};

export const adminUpdateUserMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminUpdateUserResponse,
    AxiosError<AdminUpdateUserError>,
    Options<AdminUpdateUserData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminUpdateUser({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminDeleteUserMutation = () => {
  const mutationOptions: UseMutationOptions<
    AdminDeleteUserResponse,
    AxiosError<AdminDeleteUserError>,
    Options<AdminDeleteUserData>
  > = {
    mutationFn: async (options) => {
      const { data } = await adminDeleteUser({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
