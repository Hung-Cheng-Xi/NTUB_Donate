// This file is auto-generated by @hey-api/openapi-ts

export type AddressData = {
    address: string;
};

export type BarCodeData = {
    Group: string;
    SerialNumber: string;
    Time: string;
    Money: string;
};

export type DonationPurpose = {
    id?: number;
    name: string;
    lump_sum: number;
    summary: string;
    memo?: (string | null);
    is_show: boolean;
    unit_id?: (number | null);
};

/**
 * 用於創建 DonationPurpose 時的 schema。
 * 繼承了 DonationPurposeBase，並且增加了 unit_id，因為創建時需要指定一個單位。
 */
export type DonationPurposeCreate = {
    name: string;
    lump_sum: number;
    summary: string;
    memo?: (string | null);
    is_show: boolean;
    unit_id: number;
};

/**
 * 表示捐款方式的 Enum。
 *
 * STORE: 使用實體店支付。
 * BANK: 使用銀行支付。
 */
export type DonationType = 'STORE' | 'BANK';

export type Donations = {
    id?: number;
    username: string;
    user_birthday: string;
    id_card: string;
    phone_number: string;
    email: string;
    /**
     * 捐款者身分
     */
    identity?: DonorType;
    year?: (string | null);
    gept?: (string | null);
    res_address: string;
    registered_address: string;
    public_status: string;
    memo?: (string | null);
    amount: number;
    account: string;
    /**
     * 捐款方式
     */
    type?: DonationType;
    status?: (number | null);
    transaction_id?: (string | null);
    purpose_id?: (number | null);
};

/**
 * 用於創建 Donations 記錄的 schema，繼承 DonationsBase。
 * 包含用戶需要提交的所有字段。
 */
export type DonationsCreate = {
    username: string;
    user_birthday: string;
    id_card: string;
    phone_number: string;
    email: string;
    identity?: DonorType;
    year?: (string | null);
    gept?: (string | null);
    res_address: string;
    registered_address: string;
    public_status: string;
    memo?: (string | null);
    amount: number;
    account: string;
    type?: DonationType;
    status?: (number | null);
    transaction_id?: (string | null);
    purpose_id: number;
};

/**
 * 表示捐款者身份的 Enum。
 *
 * ALUMNI: 校友
 * STAFF: 教職員
 * PARENT: 家長
 * COMMUNITY: 社區成員
 * CORPORATION: 公司
 * OTHER: 其他
 */
export type DonorType = 'ALUMNI' | 'STAFF' | 'PARENT' | 'COMMUNITY' | 'CORPORATION' | 'OTHER';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type News = {
    id?: number;
    date: string;
    title: string;
    description: string;
    is_show: boolean;
    unit_id?: (number | null);
};

/**
 * 用於創建 News 記錄的 schema，
 * 繼承了 NewsBase，包含用戶提交的所有必要字段。
 */
export type NewsCreate = {
    date: string;
    title: string;
    description: string;
    is_show: boolean;
    unit_id: number;
};

export type Unit = {
    id?: number;
    name: string;
};

/**
 * 用於創建 Unit 記錄的 schema，繼承了 UnitBase，包含用戶提交的所有必要字段。
 */
export type UnitCreate = {
    name: string;
};

export type User = {
    id?: number;
    account: string;
};

/**
 * 用於創建 User 記錄的 schema，繼承 UserBase。
 * 包含用戶提交的所有必要字段。
 */
export type UserCreate = {
    account: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetUsersResponse = (Array<User>);

export type GetUsersError = unknown;

export type CreateUserData = {
    body: UserCreate;
};

export type CreateUserResponse = (User);

export type CreateUserError = (HTTPValidationError);

export type GetUserData = {
    path: {
        user_id: number;
    };
};

export type GetUserResponse = (User);

export type GetUserError = (HTTPValidationError);

export type UpdateUserData = {
    body: UserCreate;
    path: {
        user_id: number;
    };
};

export type UpdateUserResponse = (User);

export type UpdateUserError = (HTTPValidationError);

export type DeleteUserData = {
    path: {
        user_id: number;
    };
};

export type DeleteUserResponse = (User);

export type DeleteUserError = (HTTPValidationError);

export type GetDonationsResponse = (Array<Donations>);

export type GetDonationsError = unknown;

export type CreateDonationData = {
    body: DonationsCreate;
};

export type CreateDonationResponse = (Donations);

export type CreateDonationError = (HTTPValidationError);

export type GetDonationData = {
    path: {
        donation_id: number;
    };
};

export type GetDonationResponse = (Donations);

export type GetDonationError = (HTTPValidationError);

export type UpdateDonationData = {
    body: DonationsCreate;
    path: {
        donation_id: number;
    };
};

export type UpdateDonationResponse = (Donations);

export type UpdateDonationError = (HTTPValidationError);

export type PatchDonationData = {
    body: DonationsCreate;
    path: {
        donation_id: number;
    };
};

export type PatchDonationResponse = (Donations);

export type PatchDonationError = (HTTPValidationError);

export type DeleteDonationData = {
    path: {
        donation_id: number;
    };
};

export type DeleteDonationResponse = (Donations);

export type DeleteDonationError = (HTTPValidationError);

export type GetDonationPurposesResponse = (Array<DonationPurpose>);

export type GetDonationPurposesError = unknown;

export type CreateDonationPurposeData = {
    body: DonationPurposeCreate;
};

export type CreateDonationPurposeResponse = (DonationPurpose);

export type CreateDonationPurposeError = (HTTPValidationError);

export type GetItemsData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetItemsResponse = (Array<DonationPurpose>);

export type GetItemsError = (HTTPValidationError);

export type GetDonationPurposeData = {
    path: {
        donation_purpose_id: number;
    };
};

export type GetDonationPurposeResponse = (DonationPurpose);

export type GetDonationPurposeError = (HTTPValidationError);

export type UpdateDonationPurposeData = {
    body: DonationPurposeCreate;
    path: {
        donation_purpose_id: number;
    };
};

export type UpdateDonationPurposeResponse = (DonationPurpose);

export type UpdateDonationPurposeError = (HTTPValidationError);

export type PatchDonationPurposeData = {
    body: DonationPurposeCreate;
    path: {
        donation_purpose_id: number;
    };
};

export type PatchDonationPurposeResponse = (DonationPurpose);

export type PatchDonationPurposeError = (HTTPValidationError);

export type DeleteDonationPurposeData = {
    path: {
        donation_purpose_id: number;
    };
};

export type DeleteDonationPurposeResponse = (DonationPurpose);

export type DeleteDonationPurposeError = (HTTPValidationError);

export type GetUnitsResponse = (Array<Unit>);

export type GetUnitsError = unknown;

export type CreateUnitData = {
    body: UnitCreate;
};

export type CreateUnitResponse = (Unit);

export type CreateUnitError = (HTTPValidationError);

export type GetUnitData = {
    path: {
        unit_id: number;
    };
};

export type GetUnitResponse = (Unit);

export type GetUnitError = (HTTPValidationError);

export type UpdateUnitData = {
    body: UnitCreate;
    path: {
        unit_id: number;
    };
};

export type UpdateUnitResponse = (Unit);

export type UpdateUnitError = (HTTPValidationError);

export type DeleteUnitData = {
    path: {
        unit_id: number;
    };
};

export type DeleteUnitResponse = (Unit);

export type DeleteUnitError = (HTTPValidationError);

export type GetAllNewsResponse = (Array<News>);

export type GetAllNewsError = unknown;

export type CreateNewsData = {
    body: NewsCreate;
};

export type CreateNewsResponse = (News);

export type CreateNewsError = (HTTPValidationError);

export type GetNewsData = {
    path: {
        news_id: number;
    };
};

export type GetNewsResponse = (News);

export type GetNewsError = (HTTPValidationError);

export type UpdateNewsData = {
    body: NewsCreate;
    path: {
        news_id: number;
    };
};

export type UpdateNewsResponse = (News);

export type UpdateNewsError = (HTTPValidationError);

export type PatchNewsData = {
    body: NewsCreate;
    path: {
        news_id: number;
    };
};

export type PatchNewsResponse = (News);

export type PatchNewsError = (HTTPValidationError);

export type DeleteNewsData = {
    path: {
        news_id: number;
    };
};

export type DeleteNewsResponse = (News);

export type DeleteNewsError = (HTTPValidationError);

export type GenerateBarcodeData = {
    body: BarCodeData;
};

export type GenerateBarcodeResponse = (Array<(string)>);

export type GenerateBarcodeError = (HTTPValidationError);

export type GetZipcodeData = {
    body: AddressData;
};

export type GetZipcodeResponse = ({
    [key: string]: unknown;
});

export type GetZipcodeError = (HTTPValidationError);

export type TestResponse = (unknown);

export type TestError = unknown;