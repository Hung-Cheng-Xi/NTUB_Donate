// This file is auto-generated by @hey-api/openapi-ts

/**
 * 用於創建 Address 記錄的 schema，
 * 包含地址需要提交的所有字段。
 */
export type AddressData = {
    address: string;
};

export type Announcement = {
    id?: number;
    date: string;
    title: string;
    description: string;
    is_show: boolean;
    /**
     * S3 圖片的 URL 或相對路徑
     */
    image_url?: (string | null);
    unit_id?: (number | null);
};

/**
 * 用於創建 Announcement 記錄的 schema，
 * 包含公告需要提交的所有字段。
 */
export type AnnouncementCreate = {
    date: string;
    title: string;
    description: string;
    is_show: boolean;
    image_url?: (string | null);
    unit_id: number;
};

/**
 * 用於返回 New 的基本信息，
 * 適用於讀取操作。
 */
export type AnnouncementInfo = {
    date: string;
    title: string;
    description: string;
    is_show: boolean;
    image_url?: (string | null);
    id: number;
    unit: UnitInfo;
};

/**
 * 用於更新 Announcement 記錄的 schema，
 * 允許公告更新。
 */
export type AnnouncementUpdate = {
    date: string;
    title: string;
    description: string;
    is_show: boolean;
    image_url?: (string | null);
    id: number;
    unit_id: number;
};

export type AuthRequest = {
    code: string;
};

export type AuthResponse = {
    access_token: string;
};

/**
 * 用於創建 BarCode 記錄的 schema，
 * 包含 BarCode 需要提交的所有字段。
 */
export type BarCodeData = {
    Group: string;
    SerialNumber: string;
    Time: string;
    Money: string;
};

export type Donation = {
    id?: number;
    username: string;
    user_birthday: string;
    id_card: string;
    phone_number: string;
    email: string;
    /**
     * 捐款者身分
     */
    identity?: DonorType;
    year?: (string | null);
    gept?: (string | null);
    res_address: string;
    registered_address: string;
    /**
     * 公開狀態
     */
    public_status?: PubicStatus;
    memo?: (string | null);
    amount: number;
    account: string;
    /**
     * 捐款方式
     */
    type?: DonationType;
    transaction_id?: (string | null);
    input_date?: (string | null);
    purpose_id?: number;
};

export type DonationPurpose = {
    id?: number;
    title: string;
    lump_sum: number;
    description: string;
    memo?: (string | null);
    is_show: boolean;
    /**
     * S3 圖片的 URL 或相對路徑
     */
    image_url?: (string | null);
    unit_id?: number;
};

/**
 * 用於創建 DonationPurpose 紀錄的 schema。
 * 包含捐款目的提交的所有必要字段。
 */
export type DonationPurposeCreate = {
    title: string;
    lump_sum: number;
    description: string;
    memo?: (string | null);
    is_show: boolean;
    image_url?: (string | null);
    unit_id: number;
};

/**
 * 用於返回 Donation 的子模型，
 * 適用於讀取操作。
 */
export type DonationPurposeInfo = {
    title: string;
    description: string;
};

/**
 * 用於更新 DonationPurpose 的 schema，
 * 允許捐款目的更新。
 */
export type DonationPurposeUpdate = {
    title: string;
    lump_sum: number;
    description: string;
    memo?: (string | null);
    is_show: boolean;
    image_url?: (string | null);
    unit_id: number;
};

/**
 * 表示捐款方式的 Enum。
 *
 * STORE: 使用實體店支付。
 * BANK: 使用銀行支付。
 */
export type DonationType = '實體店支付' | '銀行支付';

/**
 * 用於更新 Donation 的 schema，
 * 允許捐款更新。
 */
export type DonationUpdate = {
    username: string;
    user_birthday: string;
    id_card: string;
    phone_number: string;
    email: string;
    identity?: DonorType;
    year?: (string | null);
    gept?: (string | null);
    res_address: string;
    registered_address: string;
    public_status?: PubicStatus;
    memo?: (string | null);
    amount: number;
    account: string;
    type?: DonationType;
    transaction_id?: (string | null);
    input_date?: (string | null);
    purpose_id: number;
};

/**
 * 用於創建 Donations 記錄的 schema，
 * 包含用戶需要提交的所有字段。
 */
export type DonationsCreate = {
    username: string;
    user_birthday: string;
    id_card: string;
    phone_number: string;
    email: string;
    identity?: DonorType;
    year?: (string | null);
    gept?: (string | null);
    res_address: string;
    registered_address: string;
    public_status?: PubicStatus;
    memo?: (string | null);
    amount: number;
    account: string;
    type?: DonationType;
    transaction_id?: (string | null);
    input_date?: (string | null);
    purpose_id: number;
};

/**
 * 表示捐款者身份的 Enum。
 *
 * ALUMNI: 校友
 * STAFF: 教職員
 * PARENT: 家長
 * COMMUNITY: 社區成員
 * CORPORATION: 公司
 * OTHER: 其他
 */
export type DonorType = '校友' | '教職員' | '家長' | '社區成員' | '公司' | '其他';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * 用於返回分頁的 New 的基本信息，
 * 適用於讀取操作，可返回總筆數。
 */
export type PaginatedAnnouncementInfoResponse = {
    total_count: number;
    items: Array<AnnouncementInfo>;
};

/**
 * 用於返回分頁的 Regulation 的基本信息，
 * 適用於讀取操作，可返回總筆數。
 */
export type PaginatedRegulationInfoResponse = {
    total_count: number;
    items: Array<RegulationInfo>;
};

/**
 * 表示公開狀態的 Enum。
 *
 * PUBLIC: 公開
 * ANONYMOUS: 匿名
 * PARTIALLY: 匿名但受捐單位知曉
 */
export type PubicStatus = '公開' | '匿名' | '匿名但受捐單位知曉';

export type Regulation = {
    id?: number;
    title: string;
    /**
     * 相關法規類別
     */
    category?: RegulationCategory;
    description_link: string;
    is_show: boolean;
};

/**
 * 表示相關法規方式的 Enum。
 *
 * ALL: 全部
 * DEPARTMENT_LAWS: 各部法規
 * COMMERCIAL_LAW: 北商大法規
 * TAX_RELATED_LAWS: 相關稅法
 * DONATION_FORMS_DOWNLOAD: 捐款相關表單下載
 */
export type RegulationCategory = 'ALL' | 'DEPARTMENT_LAWS' | 'COMMERCIAL_LAW' | 'TAX_RELATED_LAWS' | 'DONATION_FORMS_DOWNLOAD';

/**
 * 用於創建 Regulationt 記錄的 schema，
 * 包含用戶提交的所有必要字段。
 */
export type RegulationCreate = {
    title: string;
    category?: RegulationCategory;
    description_link: string;
    is_show: boolean;
};

/**
 * 用於返回 Regulation 的基本信息，
 * 適用於讀取操作。
 */
export type RegulationInfo = {
    title: string;
    category?: RegulationCategory;
    description_link: string;
    is_show: boolean;
    id: number;
};

/**
 * 用於更新 Regulationt 記錄的 schema，
 * 允許法規更新。
 */
export type RegulationtUpdate = {
    title: string;
    category?: RegulationCategory;
    description_link: string;
    is_show: boolean;
};

export type Unit = {
    id?: number;
    name: string;
};

/**
 * 用於創建 Unit 記錄的 schema，
 * 包含單位提交的所有必要字段。
 */
export type UnitCreate = {
    name: string;
};

/**
 * 用於返回 Unit 的基本信息，適用於讀取操作。
 */
export type UnitInfo = {
    name: string;
    id: number;
};

/**
 * 用於更新 Unit 記錄的 schema，
 * 允許單位更新。
 */
export type UnitUpdate = {
    name: string;
};

export type User = {
    id?: number;
    account: string;
};

/**
 * 用於創建 User 記錄的 schema，
 * 包含用戶提交的所有必要字段。
 */
export type UserCreate = {
    account: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

/**
 * 用於返回 Donations 的基本信息，
 * 適用於讀取操作。
 */
export type app__application__admin__schemas__donation__DonationInfo = {
    username: string;
    user_birthday: string;
    id_card: string;
    phone_number: string;
    email: string;
    identity?: DonorType;
    year?: (string | null);
    gept?: (string | null);
    res_address: string;
    registered_address: string;
    public_status?: PubicStatus;
    memo?: (string | null);
    amount: number;
    account: string;
    type?: DonationType;
    status?: (number | null);
    transaction_id?: (string | null);
    input_date?: (string | null);
    id: number;
    purpose_id: number;
};

/**
 * 用於返回分頁的 Donation 的基本信息，
 * 適用於讀取操作，可返回總筆數。
 */
export type app__application__admin__schemas__donation__PaginatedDonationInfoResponse = {
    total_count: number;
    items: Array<app__application__admin__schemas__donation__DonationInfo>;
};

/**
 * 用於返回 DonationPurpose 的基本信息，適用於讀取操作。
 */
export type app__application__admin__schemas__donation_purpose__DonationPurposeItem = {
    title: string;
    lump_sum: number;
    description: string;
    memo?: (string | null);
    is_show: boolean;
    image_url?: (string | null);
    id: number;
};

/**
 * 用於返回分頁的 DonationPurpose 的基本信息，
 * 適用於讀取操作，可返回總筆數。
 */
export type app__application__admin__schemas__donation_purpose__PaginatedDonationPurposeInfoResponse = {
    total_count: number;
    items: Array<app__application__admin__schemas__donation_purpose__DonationPurposeItem>;
};

/**
 * 用於返回 Donations 的基本信息，
 * 適用於讀取操作。
 */
export type app__application__client__schemas__donation__DonationInfo = {
    username: string;
    amount: number;
    input_date?: (string | null);
    purpose: DonationPurposeInfo;
};

/**
 * 用於返回分頁的 Donation 的基本信息，
 * 適用於讀取操作，可返回總筆數。
 */
export type app__application__client__schemas__donation__PaginatedDonationInfoResponse = {
    total_count: number;
    items: Array<app__application__client__schemas__donation__DonationInfo>;
};

/**
 * 用於返回 DonationPurpose 的基本信息，適用於讀取操作。
 */
export type app__application__client__schemas__donation_purpose__DonationPurposeItem = {
    title: string;
    lump_sum: number;
    description: string;
    memo?: (string | null);
    is_show: boolean;
    image_url?: (string | null);
    total_donation: number;
    achieved_percentage: number;
    id: number;
};

/**
 * 用於返回分頁的 DonationPurpose 的基本信息，
 * 適用於讀取操作，可返回總筆數。
 */
export type app__application__client__schemas__donation_purpose__PaginatedDonationPurposeInfoResponse = {
    total_count: number;
    items: Array<app__application__client__schemas__donation_purpose__DonationPurposeItem>;
};

export type GetDonationsApiClientDonationGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetDonationsApiClientDonationGetResponse = (app__application__client__schemas__donation__PaginatedDonationInfoResponse);

export type GetDonationsApiClientDonationGetError = (HTTPValidationError);

export type CreateDonationApiClientDonationPostData = {
    body: DonationsCreate;
};

export type CreateDonationApiClientDonationPostResponse = (Donation);

export type CreateDonationApiClientDonationPostError = (HTTPValidationError);

export type GetDonationPurposesApiClientDonationPurposeGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetDonationPurposesApiClientDonationPurposeGetResponse = (app__application__client__schemas__donation_purpose__PaginatedDonationPurposeInfoResponse);

export type GetDonationPurposesApiClientDonationPurposeGetError = (HTTPValidationError);

export type GetDonationPurposeApiClientDonationPurposeDonationPurposeIdGetData = {
    path: {
        donation_purpose_id: number;
    };
};

export type GetDonationPurposeApiClientDonationPurposeDonationPurposeIdGetResponse = (DonationPurpose);

export type GetDonationPurposeApiClientDonationPurposeDonationPurposeIdGetError = (HTTPValidationError);

export type GetAnnouncementsApiClientAnnouncementGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetAnnouncementsApiClientAnnouncementGetResponse = (Array<AnnouncementInfo>);

export type GetAnnouncementsApiClientAnnouncementGetError = (HTTPValidationError);

export type GetAnnouncementApiClientAnnouncementAnnouncementIdGetData = {
    path: {
        announcement_id: number;
    };
};

export type GetAnnouncementApiClientAnnouncementAnnouncementIdGetResponse = (Announcement);

export type GetAnnouncementApiClientAnnouncementAnnouncementIdGetError = (HTTPValidationError);

export type GetRegulationsApiClientRegulationGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetRegulationsApiClientRegulationGetResponse = (PaginatedRegulationInfoResponse);

export type GetRegulationsApiClientRegulationGetError = (HTTPValidationError);

export type GetRegulationApiClientRegulationRegulationIdGetData = {
    path: {
        regulation_id: number;
    };
};

export type GetRegulationApiClientRegulationRegulationIdGetResponse = (Regulation);

export type GetRegulationApiClientRegulationRegulationIdGetError = (HTTPValidationError);

export type GenerateBarcodeApiClientBarcodeGenerateBarcodePostData = {
    body: BarCodeData;
};

export type GenerateBarcodeApiClientBarcodeGenerateBarcodePostResponse = (Array<(string)>);

export type GenerateBarcodeApiClientBarcodeGenerateBarcodePostError = (HTTPValidationError);

export type GetZipcodeApiClientAddressGetZipcodePostData = {
    body: AddressData;
};

export type GetZipcodeApiClientAddressGetZipcodePostResponse = ({
    [key: string]: unknown;
});

export type GetZipcodeApiClientAddressGetZipcodePostError = (HTTPValidationError);

export type LoginApiAdminAuthLoginPostData = {
    body: AuthRequest;
};

export type LoginApiAdminAuthLoginPostResponse = (unknown);

export type LoginApiAdminAuthLoginPostError = (HTTPValidationError);

export type RefreshApiAdminAuthRefreshPostResponse = (AuthResponse);

export type RefreshApiAdminAuthRefreshPostError = unknown;

export type ExcelExportApiAdminExcelExportPostData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type ExcelExportApiAdminExcelExportPostResponse = ({
    [key: string]: unknown;
});

export type ExcelExportApiAdminExcelExportPostError = (HTTPValidationError);

export type RefreshFtpDataApiAdminFtpRefreshDataPostResponse = (unknown);

export type RefreshFtpDataApiAdminFtpRefreshDataPostError = unknown;

export type ListFilesApiAdminFtpListFilesPostResponse = (unknown);

export type ListFilesApiAdminFtpListFilesPostError = unknown;

export type GetRegulationsApiAdminRegulationGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetRegulationsApiAdminRegulationGetResponse = (PaginatedRegulationInfoResponse);

export type GetRegulationsApiAdminRegulationGetError = (HTTPValidationError);

export type CreateRegulationApiAdminRegulationPostData = {
    body: RegulationCreate;
};

export type CreateRegulationApiAdminRegulationPostResponse = (Regulation);

export type CreateRegulationApiAdminRegulationPostError = (HTTPValidationError);

export type GetRegulationApiAdminRegulationRegulationIdGetData = {
    path: {
        regulation_id: number;
    };
};

export type GetRegulationApiAdminRegulationRegulationIdGetResponse = (Regulation);

export type GetRegulationApiAdminRegulationRegulationIdGetError = (HTTPValidationError);

export type UpdateRegulationApiAdminRegulationRegulationIdPutData = {
    body: RegulationtUpdate;
    path: {
        regulation_id: number;
    };
};

export type UpdateRegulationApiAdminRegulationRegulationIdPutResponse = (Regulation);

export type UpdateRegulationApiAdminRegulationRegulationIdPutError = (HTTPValidationError);

export type DeleteRegulationApiAdminRegulationRegulationIdDeleteData = {
    path: {
        regulation_id: number;
    };
};

export type DeleteRegulationApiAdminRegulationRegulationIdDeleteResponse = (Regulation);

export type DeleteRegulationApiAdminRegulationRegulationIdDeleteError = (HTTPValidationError);

export type GetDonationPurposesApiAdminDonationPurposeGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetDonationPurposesApiAdminDonationPurposeGetResponse = (app__application__admin__schemas__donation_purpose__PaginatedDonationPurposeInfoResponse);

export type GetDonationPurposesApiAdminDonationPurposeGetError = (HTTPValidationError);

export type CreateDonationPurposeApiAdminDonationPurposePostData = {
    body: DonationPurposeCreate;
};

export type CreateDonationPurposeApiAdminDonationPurposePostResponse = (DonationPurpose);

export type CreateDonationPurposeApiAdminDonationPurposePostError = (HTTPValidationError);

export type GetDonationPurposeApiAdminDonationPurposeDonationPurposeIdGetData = {
    path: {
        donation_purpose_id: number;
    };
};

export type GetDonationPurposeApiAdminDonationPurposeDonationPurposeIdGetResponse = (DonationPurpose);

export type GetDonationPurposeApiAdminDonationPurposeDonationPurposeIdGetError = (HTTPValidationError);

export type UpdateDonationPurposeApiAdminDonationPurposeDonationPurposeIdPutData = {
    body: DonationPurposeUpdate;
    path: {
        donation_purpose_id: number;
    };
};

export type UpdateDonationPurposeApiAdminDonationPurposeDonationPurposeIdPutResponse = (DonationPurpose);

export type UpdateDonationPurposeApiAdminDonationPurposeDonationPurposeIdPutError = (HTTPValidationError);

export type DeleteDonationPurposeApiAdminDonationPurposeDonationPurposeIdDeleteData = {
    path: {
        donation_purpose_id: number;
    };
};

export type DeleteDonationPurposeApiAdminDonationPurposeDonationPurposeIdDeleteResponse = (DonationPurpose);

export type DeleteDonationPurposeApiAdminDonationPurposeDonationPurposeIdDeleteError = (HTTPValidationError);

export type GetDonationsApiAdminDonationGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetDonationsApiAdminDonationGetResponse = (app__application__admin__schemas__donation__PaginatedDonationInfoResponse);

export type GetDonationsApiAdminDonationGetError = (HTTPValidationError);

export type CreateDonationApiAdminDonationPostData = {
    body: DonationsCreate;
};

export type CreateDonationApiAdminDonationPostResponse = (Donation);

export type CreateDonationApiAdminDonationPostError = (HTTPValidationError);

export type GetDonationApiAdminDonationDonationIdGetData = {
    path: {
        donation_id: number;
    };
};

export type GetDonationApiAdminDonationDonationIdGetResponse = (Donation);

export type GetDonationApiAdminDonationDonationIdGetError = (HTTPValidationError);

export type UpdateDonationApiAdminDonationDonationIdPutData = {
    body: DonationUpdate;
    path: {
        donation_id: number;
    };
};

export type UpdateDonationApiAdminDonationDonationIdPutResponse = (Donation);

export type UpdateDonationApiAdminDonationDonationIdPutError = (HTTPValidationError);

export type DeleteDonationApiAdminDonationDonationIdDeleteData = {
    path: {
        donation_id: number;
    };
};

export type DeleteDonationApiAdminDonationDonationIdDeleteResponse = (Donation);

export type DeleteDonationApiAdminDonationDonationIdDeleteError = (HTTPValidationError);

export type GetAnnouncementsApiAdminAnnouncementGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetAnnouncementsApiAdminAnnouncementGetResponse = (PaginatedAnnouncementInfoResponse);

export type GetAnnouncementsApiAdminAnnouncementGetError = (HTTPValidationError);

export type CreateAnnouncementApiAdminAnnouncementPostData = {
    body: AnnouncementCreate;
};

export type CreateAnnouncementApiAdminAnnouncementPostResponse = (Announcement);

export type CreateAnnouncementApiAdminAnnouncementPostError = (HTTPValidationError);

export type GetAnnouncementApiAdminAnnouncementAnnouncementIdGetData = {
    path: {
        announcement_id: number;
    };
};

export type GetAnnouncementApiAdminAnnouncementAnnouncementIdGetResponse = (Announcement);

export type GetAnnouncementApiAdminAnnouncementAnnouncementIdGetError = (HTTPValidationError);

export type UpdateAnnouncementApiAdminAnnouncementAnnouncementIdPutData = {
    body: AnnouncementUpdate;
    path: {
        announcement_id: number;
    };
};

export type UpdateAnnouncementApiAdminAnnouncementAnnouncementIdPutResponse = (Announcement);

export type UpdateAnnouncementApiAdminAnnouncementAnnouncementIdPutError = (HTTPValidationError);

export type DeleteAnnouncementApiAdminAnnouncementAnnouncementIdDeleteData = {
    path: {
        announcement_id: number;
    };
};

export type DeleteAnnouncementApiAdminAnnouncementAnnouncementIdDeleteResponse = (Announcement);

export type DeleteAnnouncementApiAdminAnnouncementAnnouncementIdDeleteError = (HTTPValidationError);

export type GetUnitsApiAdminUnitGetResponse = (Array<Unit>);

export type GetUnitsApiAdminUnitGetError = unknown;

export type CreateUnitApiAdminUnitPostData = {
    body: UnitCreate;
};

export type CreateUnitApiAdminUnitPostResponse = (Unit);

export type CreateUnitApiAdminUnitPostError = (HTTPValidationError);

export type GetUnitApiAdminUnitUnitIdGetData = {
    path: {
        unit_id: number;
    };
};

export type GetUnitApiAdminUnitUnitIdGetResponse = (Unit);

export type GetUnitApiAdminUnitUnitIdGetError = (HTTPValidationError);

export type UpdateUnitApiAdminUnitUnitIdPutData = {
    body: UnitUpdate;
    path: {
        unit_id: number;
    };
};

export type UpdateUnitApiAdminUnitUnitIdPutResponse = (Unit);

export type UpdateUnitApiAdminUnitUnitIdPutError = (HTTPValidationError);

export type DeleteUnitApiAdminUnitUnitIdDeleteData = {
    path: {
        unit_id: number;
    };
};

export type DeleteUnitApiAdminUnitUnitIdDeleteResponse = (Unit);

export type DeleteUnitApiAdminUnitUnitIdDeleteError = (HTTPValidationError);

export type GetUsersApiAdminUserGetResponse = (Array<User>);

export type GetUsersApiAdminUserGetError = unknown;

export type CreateUserApiAdminUserPostData = {
    body: UserCreate;
};

export type CreateUserApiAdminUserPostResponse = (User);

export type CreateUserApiAdminUserPostError = (HTTPValidationError);

export type GetUserApiAdminUserUserIdGetData = {
    path: {
        user_id: number;
    };
};

export type GetUserApiAdminUserUserIdGetResponse = (User);

export type GetUserApiAdminUserUserIdGetError = (HTTPValidationError);

export type UpdateUserApiAdminUserUserIdPutData = {
    body: UserCreate;
    path: {
        user_id: number;
    };
};

export type UpdateUserApiAdminUserUserIdPutResponse = (User);

export type UpdateUserApiAdminUserUserIdPutError = (HTTPValidationError);

export type DeleteUserApiAdminUserUserIdDeleteData = {
    path: {
        user_id: number;
    };
};

export type DeleteUserApiAdminUserUserIdDeleteResponse = (User);

export type DeleteUserApiAdminUserUserIdDeleteError = (HTTPValidationError);