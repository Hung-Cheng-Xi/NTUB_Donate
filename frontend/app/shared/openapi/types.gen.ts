// This file is auto-generated by @hey-api/openapi-ts

/**
 * 用於創建 Address 記錄的 schema，
 */
export type AddressData = {
    address: string;
};

export type AuthRequest = {
    code: string;
};

export type AuthResponse = {
    access_token: string;
};

/**
 * 用於創建 BarCode 記錄的 schema，
 */
export type BarCodeData = {
    Group: string;
    SerialNumber: string;
    Time: string;
    Money: string;
};

export type Document = {
    id?: number;
    title: string;
    /**
     * 相關法規類別
     */
    category?: DocumentCategory;
    description_link: string;
    is_show: boolean;
};

/**
 * 表示相關法規方式的 Enum。
 *
 * ALL: 全部
 * DEPARTMENT_LAWS: 各部法規
 * COMMERCIAL_LAW: 北商大法規
 * TAX_RELATED_LAWS: 相關稅法
 * DONATION_FORMS_DOWNLOAD: 捐款相關表單下載
 */
export type DocumentCategory = 'ALL' | 'DEPARTMENT_LAWS' | 'COMMERCIAL_LAW' | 'TAX_RELATED_LAWS' | 'DONATION_FORMS_DOWNLOAD';

/**
 * 用於創建 Document 記錄的 schema，
 * 繼承了 DocumentBase，包含相關法規提交的所有必要字段。
 */
export type DocumentCreate = {
    title: string;
    category?: DocumentCategory;
    description_link: string;
    is_show: boolean;
};

export type DonationPurpose = {
    id?: number;
    title: string;
    lump_sum: number;
    description: string;
    memo?: (string | null);
    is_show: boolean;
    unit_id?: (number | null);
};

/**
 * 用於創建 DonationPurpose 時的 schema。
 * 繼承了 DonationPurposeBase，並且增加了 unit_id，因為創建時需要指定一個單位。
 */
export type DonationPurposeCreate = {
    name: string;
    lump_sum: number;
    summary: string;
    memo?: (string | null);
    is_show: boolean;
    unit_id: number;
};

/**
 * 表示捐款方式的 Enum。
 *
 * STORE: 使用實體店支付。
 * BANK: 使用銀行支付。
 */
export type DonationType = 'STORE' | 'BANK';

export type Donations = {
    id?: number;
    username: string;
    user_birthday: string;
    id_card: string;
    phone_number: string;
    email: string;
    /**
     * 捐款者身分
     */
    identity?: DonorType;
    year?: (string | null);
    gept?: (string | null);
    res_address: string;
    registered_address: string;
    /**
     * 公開狀態
     */
    public_status?: PubicStatus;
    memo?: (string | null);
    amount: number;
    account: string;
    /**
     * 捐款方式
     */
    type?: DonationType;
    status?: (number | null);
    transaction_id?: (string | null);
    input_date?: (string | null);
    purpose_id?: (number | null);
};

/**
 * 用於創建 Donations 記錄的 schema，繼承 DonationsBase。
 * 包含用戶需要提交的所有字段。
 */
export type DonationsCreate = {
    username: string;
    user_birthday: string;
    id_card: string;
    phone_number: string;
    email: string;
    identity?: DonorType;
    year?: (string | null);
    gept?: (string | null);
    res_address: string;
    registered_address: string;
    public_status?: PubicStatus;
    memo?: (string | null);
    amount: number;
    account: string;
    type?: DonationType;
    status?: (number | null);
    transaction_id?: (string | null);
    input_date?: (string | null);
    purpose_id: number;
};

/**
 * 表示捐款者身份的 Enum。
 *
 * ALUMNI: 校友
 * STAFF: 教職員
 * PARENT: 家長
 * COMMUNITY: 社區成員
 * CORPORATION: 公司
 * OTHER: 其他
 */
export type DonorType = 'ALUMNI' | 'STAFF' | 'PARENT' | 'COMMUNITY' | 'CORPORATION' | 'OTHER';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type News = {
    id?: number;
    date: string;
    title: string;
    description: string;
    is_show: boolean;
    unit_id?: (number | null);
};

/**
 * 用於創建 News 記錄的 schema，
 * 繼承了 NewsBase，包含用戶提交的所有必要字段。
 */
export type NewsCreate = {
    date: string;
    title: string;
    description: string;
    is_show: boolean;
    unit_id: number;
};

/**
 * 表示公開狀態的 Enum。
 *
 * PUBLIC: 公開
 * ANONYMOUS: 匿名
 * PARTIALLY: 匿名但受捐單位知曉
 */
export type PubicStatus = 'PUBLIC' | 'ANONYMOUS' | 'PARTIALLY';

export type Unit = {
    id?: number;
    name: string;
};

/**
 * 用於創建 Unit 記錄的 schema，繼承了 UnitBase，包含用戶提交的所有必要字段。
 */
export type UnitCreate = {
    name: string;
};

export type User = {
    id?: number;
    account: string;
};

/**
 * 用於創建 User 記錄的 schema，繼承 UserBase。
 * 包含用戶提交的所有必要字段。
 */
export type UserCreate = {
    account: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetUsersApiClientUserGetResponse = (Array<User>);

export type GetUsersApiClientUserGetError = unknown;

export type CreateUserApiClientUserPostData = {
    body: UserCreate;
};

export type CreateUserApiClientUserPostResponse = (User);

export type CreateUserApiClientUserPostError = (HTTPValidationError);

export type GetUserApiClientUserUserIdGetData = {
    path: {
        user_id: number;
    };
};

export type GetUserApiClientUserUserIdGetResponse = (User);

export type GetUserApiClientUserUserIdGetError = (HTTPValidationError);

export type UpdateUserApiClientUserUserIdPutData = {
    body: UserCreate;
    path: {
        user_id: number;
    };
};

export type UpdateUserApiClientUserUserIdPutResponse = (User);

export type UpdateUserApiClientUserUserIdPutError = (HTTPValidationError);

export type DeleteUserApiClientUserUserIdDeleteData = {
    path: {
        user_id: number;
    };
};

export type DeleteUserApiClientUserUserIdDeleteResponse = (User);

export type DeleteUserApiClientUserUserIdDeleteError = (HTTPValidationError);

export type GetDonationsApiClientDonationGetResponse = (Array<Donations>);

export type GetDonationsApiClientDonationGetError = unknown;

export type CreateDonationApiClientDonationPostData = {
    body: DonationsCreate;
};

export type CreateDonationApiClientDonationPostResponse = (Donations);

export type CreateDonationApiClientDonationPostError = (HTTPValidationError);

export type GetDonationApiClientDonationDonationIdGetData = {
    path: {
        donation_id: number;
    };
};

export type GetDonationApiClientDonationDonationIdGetResponse = (Donations);

export type GetDonationApiClientDonationDonationIdGetError = (HTTPValidationError);

export type UpdateDonationApiClientDonationDonationIdPutData = {
    body: DonationsCreate;
    path: {
        donation_id: number;
    };
};

export type UpdateDonationApiClientDonationDonationIdPutResponse = (Donations);

export type UpdateDonationApiClientDonationDonationIdPutError = (HTTPValidationError);

export type PatchDonationApiClientDonationDonationIdPatchData = {
    body: DonationsCreate;
    path: {
        donation_id: number;
    };
};

export type PatchDonationApiClientDonationDonationIdPatchResponse = (Donations);

export type PatchDonationApiClientDonationDonationIdPatchError = (HTTPValidationError);

export type DeleteDonationApiClientDonationDonationIdDeleteData = {
    path: {
        donation_id: number;
    };
};

export type DeleteDonationApiClientDonationDonationIdDeleteResponse = (Donations);

export type DeleteDonationApiClientDonationDonationIdDeleteError = (HTTPValidationError);

export type GetDonationPurposesApiClientDonationPurposeGetResponse = (Array<DonationPurpose>);

export type GetDonationPurposesApiClientDonationPurposeGetError = unknown;

export type CreateDonationPurposeApiClientDonationPurposePostData = {
    body: DonationPurposeCreate;
};

export type CreateDonationPurposeApiClientDonationPurposePostResponse = (DonationPurpose);

export type CreateDonationPurposeApiClientDonationPurposePostError = (HTTPValidationError);

export type GetItemsApiClientDonationPurposeItemsGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type GetItemsApiClientDonationPurposeItemsGetResponse = (Array<DonationPurpose>);

export type GetItemsApiClientDonationPurposeItemsGetError = (HTTPValidationError);

export type GetDonationPurposeApiClientDonationPurposeDonationPurposeIdGetData = {
    path: {
        donation_purpose_id: number;
    };
};

export type GetDonationPurposeApiClientDonationPurposeDonationPurposeIdGetResponse = (DonationPurpose);

export type GetDonationPurposeApiClientDonationPurposeDonationPurposeIdGetError = (HTTPValidationError);

export type UpdateDonationPurposeApiClientDonationPurposeDonationPurposeIdPutData = {
    body: DonationPurposeCreate;
    path: {
        donation_purpose_id: number;
    };
};

export type UpdateDonationPurposeApiClientDonationPurposeDonationPurposeIdPutResponse = (DonationPurpose);

export type UpdateDonationPurposeApiClientDonationPurposeDonationPurposeIdPutError = (HTTPValidationError);

export type PatchDonationPurposeApiClientDonationPurposeDonationPurposeIdPatchData = {
    body: DonationPurposeCreate;
    path: {
        donation_purpose_id: number;
    };
};

export type PatchDonationPurposeApiClientDonationPurposeDonationPurposeIdPatchResponse = (DonationPurpose);

export type PatchDonationPurposeApiClientDonationPurposeDonationPurposeIdPatchError = (HTTPValidationError);

export type DeleteDonationPurposeApiClientDonationPurposeDonationPurposeIdDeleteData = {
    path: {
        donation_purpose_id: number;
    };
};

export type DeleteDonationPurposeApiClientDonationPurposeDonationPurposeIdDeleteResponse = (DonationPurpose);

export type DeleteDonationPurposeApiClientDonationPurposeDonationPurposeIdDeleteError = (HTTPValidationError);

export type GetUnitsApiClientUnitGetResponse = (Array<Unit>);

export type GetUnitsApiClientUnitGetError = unknown;

export type CreateUnitApiClientUnitPostData = {
    body: UnitCreate;
};

export type CreateUnitApiClientUnitPostResponse = (Unit);

export type CreateUnitApiClientUnitPostError = (HTTPValidationError);

export type GetUnitApiClientUnitUnitIdGetData = {
    path: {
        unit_id: number;
    };
};

export type GetUnitApiClientUnitUnitIdGetResponse = (Unit);

export type GetUnitApiClientUnitUnitIdGetError = (HTTPValidationError);

export type UpdateUnitApiClientUnitUnitIdPutData = {
    body: UnitCreate;
    path: {
        unit_id: number;
    };
};

export type UpdateUnitApiClientUnitUnitIdPutResponse = (Unit);

export type UpdateUnitApiClientUnitUnitIdPutError = (HTTPValidationError);

export type DeleteUnitApiClientUnitUnitIdDeleteData = {
    path: {
        unit_id: number;
    };
};

export type DeleteUnitApiClientUnitUnitIdDeleteResponse = (Unit);

export type DeleteUnitApiClientUnitUnitIdDeleteError = (HTTPValidationError);

export type GetAllNewsApiClientNewsGetResponse = (Array<News>);

export type GetAllNewsApiClientNewsGetError = unknown;

export type CreateNewsApiClientNewsPostData = {
    body: NewsCreate;
};

export type CreateNewsApiClientNewsPostResponse = (News);

export type CreateNewsApiClientNewsPostError = (HTTPValidationError);

export type GetNewsApiClientNewsNewsIdGetData = {
    path: {
        news_id: number;
    };
};

export type GetNewsApiClientNewsNewsIdGetResponse = (News);

export type GetNewsApiClientNewsNewsIdGetError = (HTTPValidationError);

export type UpdateNewsApiClientNewsNewsIdPutData = {
    body: NewsCreate;
    path: {
        news_id: number;
    };
};

export type UpdateNewsApiClientNewsNewsIdPutResponse = (News);

export type UpdateNewsApiClientNewsNewsIdPutError = (HTTPValidationError);

export type PatchNewsApiClientNewsNewsIdPatchData = {
    body: NewsCreate;
    path: {
        news_id: number;
    };
};

export type PatchNewsApiClientNewsNewsIdPatchResponse = (News);

export type PatchNewsApiClientNewsNewsIdPatchError = (HTTPValidationError);

export type DeleteNewsApiClientNewsNewsIdDeleteData = {
    path: {
        news_id: number;
    };
};

export type DeleteNewsApiClientNewsNewsIdDeleteResponse = (News);

export type DeleteNewsApiClientNewsNewsIdDeleteError = (HTTPValidationError);

export type GenerateBarcodeApiClientBarcodeGenerateBarcodePostData = {
    body: BarCodeData;
};

export type GenerateBarcodeApiClientBarcodeGenerateBarcodePostResponse = (Array<(string)>);

export type GenerateBarcodeApiClientBarcodeGenerateBarcodePostError = (HTTPValidationError);

export type GetZipcodeApiClientAddressGetZipcodePostData = {
    body: AddressData;
};

export type GetZipcodeApiClientAddressGetZipcodePostResponse = ({
    [key: string]: unknown;
});

export type GetZipcodeApiClientAddressGetZipcodePostError = (HTTPValidationError);

export type LoginApiAdminAuthLoginPostData = {
    body: AuthRequest;
};

export type LoginApiAdminAuthLoginPostResponse = (unknown);

export type LoginApiAdminAuthLoginPostError = (HTTPValidationError);

export type RefreshApiAdminAuthRefreshPostResponse = (AuthResponse);

export type RefreshApiAdminAuthRefreshPostError = unknown;

export type ExcelExportApiAdminExcelExportPostResponse = ({
    [key: string]: unknown;
});

export type ExcelExportApiAdminExcelExportPostError = unknown;

export type RefreshFtpDataApiAdminFtpRefreshDataPostResponse = (unknown);

export type RefreshFtpDataApiAdminFtpRefreshDataPostError = unknown;

export type ListFilesApiAdminFtpListFilesPostResponse = (unknown);

export type ListFilesApiAdminFtpListFilesPostError = unknown;

export type GetDocumentsApiAdminDocumentGetResponse = (Array<Document>);

export type GetDocumentsApiAdminDocumentGetError = unknown;

export type CreateDocumentApiAdminDocumentPostData = {
    body: DocumentCreate;
};

export type CreateDocumentApiAdminDocumentPostResponse = (Document);

export type CreateDocumentApiAdminDocumentPostError = (HTTPValidationError);

export type GetDocumentApiAdminDocumentDocumentIdGetData = {
    path: {
        document_id: number;
    };
};

export type GetDocumentApiAdminDocumentDocumentIdGetResponse = (Document);

export type GetDocumentApiAdminDocumentDocumentIdGetError = (HTTPValidationError);

export type UpdateDocumentApiAdminDocumentDocumentIdPutData = {
    body: DocumentCreate;
    path: {
        document_id: number;
    };
};

export type UpdateDocumentApiAdminDocumentDocumentIdPutResponse = (Document);

export type UpdateDocumentApiAdminDocumentDocumentIdPutError = (HTTPValidationError);