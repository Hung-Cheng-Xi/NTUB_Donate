"""init migration

Revision ID: 0503b8def55b
Revises:
Create Date: 2024-10-16 20:25:18.410185

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '0503b8def55b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('regulation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('category', sa.Enum('ALL', 'DEPARTMENT_LAWS', 'COMMERCIAL_LAW', 'TAX_RELATED_LAWS', 'DONATION_FORMS_DOWNLOAD', name='regulationcategory'), nullable=False),
    sa.Column('description_link', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_show', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('announcement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_show', sa.Boolean(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['unit_id'], ['unit.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('donationpurpose',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lump_sum', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('memo', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_show', sa.Boolean(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['unit_id'], ['unit.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('donation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_birthday', sa.Date(), nullable=False),
    sa.Column('id_card', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('identity', sa.Enum('ALUMNI', 'STAFF', 'PARENT', 'COMMUNITY', 'CORPORATION', 'OTHER', name='donortype'), nullable=False),
    sa.Column('year', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('gept', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('res_address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('registered_address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('public_status', sa.Enum('PUBLIC', 'ANONYMOUS', 'PARTIALLY', name='pubicstatus'), nullable=False),
    sa.Column('memo', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('account', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('STORE', 'BANK', name='donationtype'), nullable=False),
    sa.Column('transaction_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('input_date', sa.Date(), nullable=True),
    sa.Column('purpose_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['purpose_id'], ['donationpurpose.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    # 插入假数据
    connection = op.get_bind()

    connection.execute(
        sa.table('regulation',
            sa.Column('id', sa.Integer()),
            sa.Column('title', sa.String()),
            sa.Column('category', sa.String()),
            sa.Column('description_link', sa.String()),
            sa.Column('is_show', sa.Boolean())
        ).insert(),
        [
            {'id': i, 'title': f"Donation Law {i}", 'category': "COMMERCIAL_LAW", 'description_link': f"http://example.com/donation-law-{i}", 'is_show': True}
            for i in range(1, 6)
        ]
    )

    connection.execute(
        sa.table('unit',
            sa.Column('id', sa.Integer()),
            sa.Column('name', sa.String())
        ).insert(),
        [
            {'id': i, 'name': f"Unit {i}"}
            for i in range(1, 6)
        ]
    )

    connection.execute(
        sa.table('user',
            sa.Column('id', sa.Integer()),
            sa.Column('account', sa.String())
        ).insert(),
        [
            {'id': i, 'account': f"user{i}"}
            for i in range(1, 6)
        ]
    )

    connection.execute(
        sa.table('announcement',
            sa.Column('id', sa.Integer()),
            sa.Column('date', sa.Date()),
            sa.Column('title', sa.String()),
            sa.Column('description', sa.String()),
            sa.Column('is_show', sa.Boolean()),
            sa.Column('unit_id', sa.Integer())
        ).insert(),
        [
            {'id': i, 'date': '2024-10-16', 'title': f"Announcement {i}", 'description': f"This is announcement {i}.", 'is_show': True, 'unit_id': 1}
            for i in range(1, 6)
        ]
    )

    connection.execute(
        sa.table('donationpurpose',
            sa.Column('id', sa.Integer()),
            sa.Column('title', sa.String()),
            sa.Column('lump_sum', sa.Integer()),
            sa.Column('description', sa.String()),
            sa.Column('memo', sa.String()),
            sa.Column('is_show', sa.Boolean()),
            sa.Column('unit_id', sa.Integer())
        ).insert(),
        [
            {'id': i, 'title': f"Purpose {i}", 'lump_sum': 5000 * i, 'description': f"Purpose description {i}", 'memo': f"Memo {i}", 'is_show': True, 'unit_id': 1}
            for i in range(1, 6)
        ]
    )

    connection.execute(
        sa.table('donation',
            sa.Column('id', sa.Integer()),
            sa.Column('username', sa.String()),
            sa.Column('user_birthday', sa.Date()),
            sa.Column('id_card', sa.String()),
            sa.Column('phone_number', sa.String()),
            sa.Column('email', sa.String()),
            sa.Column('identity', sa.String()),
            sa.Column('res_address', sa.String()),
            sa.Column('registered_address', sa.String()),
            sa.Column('public_status', sa.String()),
            sa.Column('memo', sa.String()),
            sa.Column('amount', sa.Integer()),
            sa.Column('account', sa.String()),
            sa.Column('type', sa.String()),
            sa.Column('transaction_id', sa.String()),
            sa.Column('input_date', sa.Date()),
            sa.Column('purpose_id', sa.Integer())
        ).insert(),
        [
            {
                'id': i,
                'username': f"User {i}",
                'user_birthday': '1980-01-01',
                'id_card': f"A12345678{i}",
                'phone_number': f"091234567{i}",
                'email': f"user{i}@example.com",
                'identity': 'ALUMNI',
                'res_address': f"{i} Main St",
                'registered_address': f"{i} Main St",
                'public_status': 'PUBLIC',
                'memo': f"Memo {i}",
                'amount': 1000 * i,
                'account': f"user{i}_account",
                'type': 'BANK',
                'transaction_id': f"TX12345678{i}",
                'input_date': "2024-10-16",
                'purpose_id': 1
            }
            for i in range(1, 6)
        ]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('donation')
    op.drop_table('donationpurpose')
    op.drop_table('announcement')
    op.drop_table('user')
    op.drop_table('unit')
    op.drop_table('regulation')
    # ### end Alembic commands ###
